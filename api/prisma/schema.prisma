generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String?
  phone     String?  @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company        Company?        @relation("user_company_owner")
  companyMembers CompanyMember[]
  tokens         Token[]

  @@map("users")
}

model Company {
  id             String      @id @default(uuid())
  name           String
  documentNumber String      @unique @map("document_number")
  size           CompanySize
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  ownerId String @unique @map("owner_id")
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, name: "user_company_owner")

  addressId String?  @unique @map("address_id")
  address   Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)

  companyMembers      CompanyMember[]
  drivers             Driver[]
  freights            Freight[]
  routes              Route[]
  vehicles            Vehicle[]
  companyStatesAreas  CompanyStateArea[]
  financeTransactions FinanceTransaction[]
  Pickup              Pickup[]

  @@map("companies")
}

model CompanyStateArea {
  id String @id @default(uuid())

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  stateId String @map("state_id")
  state   State  @relation(fields: [stateId], references: [id])

  areaId String @map("area_id")
  area   Area   @relation(fields: [areaId], references: [id])

  @@unique([companyId, stateId, areaId], name: "unique_company_state_area")
  @@map("company_states_areas")
}

model CompanyMember {
  id        String        @id @default(uuid())
  sector    String
  role      Role
  status    AccountStatus @default(PENDING)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  drivers             Driver[]
  freights            Freight[]
  vehicles            Vehicle[]
  routes              Route[]
  financeTransactions FinanceTransaction[]
  pickups             Pickup[]

  @@unique([companyId, userId])
  @@map("company_members")
}

model Driver {
  id             String        @id @default(uuid())
  name           String
  documentNumber String        @unique @map("document_number")
  phone          String        @unique
  status         AccountStatus @default(ACTIVE)
  type           DriverType
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  creatorId String        @map("creator_id")
  creator   CompanyMember @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  addressId String?  @map("address_id")
  address   Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)

  freights      Freight[]
  Pickup        Pickup[]
  PickupHistory PickupHistory[]

  @@unique([documentNumber, companyId])
  @@map("drivers")
}

model Vehicle {
  id               String          @id @default(uuid())
  plate            String          @unique
  trailerPlate     String?         @unique @map("trailer_plate")
  year             Int
  brand            String
  model            String
  category         VehicleCategory
  type             VehicleType
  body             VehicleBody
  fullLoadCapacity Int             @map("full_load_capacity")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  creatorId String        @map("creator_id")
  creator   CompanyMember @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  freights Freight[]

  @@unique([plate, companyId])
  @@unique([trailerPlate, companyId])
  @@map("vehicles")
}

model Freight {
  id                      String          @id @default(uuid())
  type                    FreightType
  modality                FreightModality
  date                    DateTime
  pickupsQuantity         Int?            @map("pickups_quantity")
  deliveriesQuantity      Int             @map("deliveries_quantity")
  totalWeightOfPickups    Decimal?        @map("total_weight_of_pickups") @db.Decimal(10, 2)
  totalWeightOfDeliveries Decimal         @map("total_weight_of_deliveries") @db.Decimal(10, 2)
  freightAmountInCents    Int             @map("freight_amount_in_cents")
  observation             String?
  createdAt               DateTime        @default(now()) @map("created_at")
  updatedAt               DateTime        @updatedAt @map("updated_at")

  driverId String @map("driver_id")
  driver   Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  vehicleId String  @map("vehicle_id")
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  creatorId String?        @map("creator_id")
  creator   CompanyMember? @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  routeId String? @map("route_id")
  route   Route?  @relation(fields: [routeId], references: [id])

  cityId String?  @map("city_id")
  city   City?    @relation(fields: [cityId], references: [id])
  Pickup Pickup[]

  @@index([date])
  @@map("freights")
}

model Pickup {
  id              String           @id @default(uuid())
  pickupNumber    String           @unique @map("pickup_number")
  senderName      String           @map("sender_name")
  recipientName   String           @map("recipient_name")
  weight          Decimal          @db.Decimal(10, 2)
  volumeQuantity  Int              @map("volume_quantity")
  cubage          Decimal?         @db.Decimal(10, 2)
  status          PickupStatus     @default(PENDING)
  priority        PickupPriority   @default(NORMAL)
  observation     String?
  nonPickupReason NonPickupReason? @map("non_pickup_reason")
  requestedAt     DateTime         @default(now()) @map("requested_at")
  scheduledDate   DateTime         @map("scheduled_date")
  collectedAt     DateTime?        @map("collected_at")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("last_updated_at")

  freightId String?  @map("freight_id")
  freight   Freight? @relation(fields: [freightId], references: [id], onDelete: SetNull)

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  creatorId String?        @map("creator_id")
  creator   CompanyMember? @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  assignedDriverId String? @map("assigned_driver_id")
  assignedDriver   Driver? @relation(fields: [assignedDriverId], references: [id], onDelete: SetNull)

  addressId     String  @map("address_id")
  pickupAddress Address @relation(fields: [addressId], references: [id])

  pickupHistories PickupHistory[]

  @@index([pickupNumber])
  @@index([status])
  @@map("pickups")
}

model PickupHistory {
  id              String           @id @default(uuid())
  status          PickupStatus     @map("status")
  nonPickupReason NonPickupReason? @map("non_pickup_reason")
  attemptDate     DateTime         @default(now()) @map("attempt_date")
  observation     String?          @map("observation")

  pickupId String @map("pickup_id")
  pickup   Pickup @relation(fields: [pickupId], references: [id], onDelete: Cascade)

  driverId String? @map("driver_id")
  driver   Driver? @relation(fields: [driverId], references: [id], onDelete: SetNull)

  @@index([pickupId])
  @@map("pickup_histories")
}

model Route {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  creatorId String        @map("creator_id")
  creator   CompanyMember @relation(fields: [creatorId], references: [id])

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  citiesInRoute CityInRoute[]
  freights      Freight[]

  @@map("routes")
}

model CityInRoute {
  id String @id @default(uuid())

  routeId String @map("route_id")
  route   Route  @relation(fields: [routeId], references: [id], onDelete: Cascade)

  cityId String @map("city_id")
  city   City   @relation(fields: [cityId], references: [id])

  @@map("cities_in_route")
}

model State {
  id      String @id @default(uuid())
  name    String
  acronym String @unique

  cities           City[]
  areas            Area[]
  CompanyStateArea CompanyStateArea[]

  @@map("states")
}

model Area {
  id   String @id @default(uuid())
  name String
  code Int    @unique

  stateId String @map("state_id")
  state   State  @relation(fields: [stateId], references: [id], onDelete: Cascade)

  cities           City[]
  CompanyStateArea CompanyStateArea[]

  @@map("areas")
}

model City {
  id   String @id @default(uuid())
  name String

  stateId String @map("state_id")
  state   State  @relation(fields: [stateId], references: [id], onDelete: Cascade)

  areaId String @map("area_id")
  area   Area   @relation(fields: [areaId], references: [id], onDelete: Cascade)

  addresses     Address[]
  citiesInRoute CityInRoute[]
  freights      Freight[]

  @@map("cities")
}

model Address {
  id           String   @id @default(uuid())
  zipCode      String   @map("zip_code")
  street       String
  neighborhood String
  number       Int
  complement   String?
  createdAt    DateTime @default(now()) @map("created_at")

  cityId String @map("city_id")
  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)

  companies Company[]
  drivers   Driver[]
  pickups   Pickup[]

  @@map("addresses")
}

model Token {
  id        String    @id @default(uuid())
  code      String    @unique
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("token")
}

model FinanceTransaction {
  id            String                   @id @default(uuid())
  description   String?
  amountInCents Int                      @map("amount_in_cents")
  dueDate       DateTime?                @map("due_date")
  type          FinanceTransactionType
  status        FinanceTransactionStatus
  paymentMethod PaymentMethod?           @map("payment_method")
  createdAt     DateTime                 @default(now()) @map("created_at")
  updatedAt     DateTime                 @updatedAt @map("updated_at")

  categoryId String          @map("category_id")
  category   FinanceCategory @relation(fields: [categoryId], references: [id])
  companyId  String          @map("company_id")
  company    Company         @relation(fields: [companyId], references: [id])
  creatorId  String?         @map("creator_id")
  creator    CompanyMember?  @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  @@map("finance_transactions")
}

model FinanceCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  financeTransactions FinanceTransaction[]

  @@map("finance_categories")
}

enum Role {
  ADMIN
  MANAGER
  FINANCIAL
  COMERCIAL
  OPERATIONAL
}

enum CompanySize {
  MICRO
  SMALL
  MEDIUM
  BIG
}

enum VehicleCategory {
  UTILITY
  VAN
  LIGHT_TRUCKS
  STRAIGHT_TRUCKS
  TRUCKS
  QUAD_AXLE_TRUCKS
  SEMI_TRAILER
  B_TRAIN
  ROAD_TRAIN
}

enum VehicleBody {
  CLOSED
  OPEN
  SIDER
  REFRIGERATED
  BUCKET
  TANK
  BULK_CARRIER
  LIVESTOCK
  FLATBED
  CONTAINER
  WOOD
  CAR_CARRIER
}

enum VehicleType {
  OWN
  OUTSOURCED
  RENTED
}

enum FreightType {
  FRACTIONAL
  DEDICATED
  EXPRESS
  TRANSFER
}

enum FreightModality {
  DAILY
  PERCENTAGE
  PRODUCTIVITY
  FLAT_RATE
  WEIGHT_BASED
  DISTANCE_BASED
  TIME_BASED
  PER_STOP
  ZONE_BASED
}

enum PickupStatus {
  PENDING
  IN_ROUTE
  COLLECTED
  CANCELED
}

enum PickupPriority {
  NORMAL
  URGENT
}

enum NonPickupReason {
  CUSTOMER_ABSENT
  WRONG_ADDRESS
  ACCESS_RESTRICTED
  REFUSED_BY_CUSTOMER
  WEATHER_CONDITIONS
  OTHER
}

enum AccountStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum DriverType {
  INTERNAL
  FREELANCER
  AGGREGATE
}

enum TokenType {
  PASSWORD_RECOVER
  AUTH_LINK
}

enum FinanceTransactionType {
  INCOME
  EXPENSE
}

enum FinanceTransactionStatus {
  PENDING
  PAID
  OVERDUE
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PIX
  OTHER
}
