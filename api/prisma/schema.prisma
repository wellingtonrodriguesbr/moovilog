generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  company       Company?        @relation("user_company_owner")
  companyMember CompanyMember[]

  @@map("users")
}

model Company {
  id             String      @id @default(uuid())
  name           String
  documentNumber String      @unique @map("document_number")
  size           CompanySize
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  ownerId String @unique @map("owner_id")
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, name: "user_company_owner")

  addressId String  @map("address_id")
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  companyMembers CompanyMember[]
  drivers        Driver[]
  freights       Freight[]
  routes         Route[]
  vehicles       Vehicle[]

  @@map("companies")
}

model CompanyMember {
  id        String        @id @default(uuid())
  sector    String
  role      Role
  status    AccountStatus @default(PENDING)
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  drivers  Driver[]
  freights Freight[]

  @@unique([companyId, userId])
  @@map("company_members")
}

model Driver {
  id             String        @id @default(uuid())
  name           String
  documentNumber String        @unique @map("document_number")
  phone          String        @unique
  status         AccountStatus @default(ACTIVE)
  type           DriverType
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  creatorId String        @map("creator_id")
  creator   CompanyMember @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  addressId String  @map("address_id")
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  freights Freight[]

  @@unique([documentNumber, companyId])
  @@map("drivers")
}

model Vehicle {
  id               String          @id @default(uuid())
  plate            String          @unique
  year             Int
  brand            String
  model            String
  category         VehicleCategory
  type             VehicleType
  body             VehicleBody
  fullLoadCapacity String          @map("full_load_capacity")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  freights Freight[]

  @@unique([plate, companyId])
  @@map("vehicles")
}

model Freight {
  id                      String          @id @default(uuid())
  type                    FreightType
  modality                FreightModality
  date                    DateTime
  pickupsQuantity         Int?            @map("pickups_quantity")
  deliveriesQuantity      Int             @map("deliveries_quantity")
  totalWeightOfPickups    Decimal?        @map("total_weight_of_pickups") @db.Decimal(10, 2)
  totalWeightOfDeliveries Decimal         @map("total_weight_of_deliveries") @db.Decimal(10, 2)
  freightAmountInCents    Int             @map("freight_amount_in_cents")
  observation             String?
  createdAt               DateTime        @default(now()) @map("created_at")
  updatedAt               DateTime        @updatedAt @map("updated_at")

  driverId String @map("driver_id")
  driver   Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  vehicleId String  @map("vehicle_id")
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  creatorId String        @map("creator_id")
  creator   CompanyMember @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([date])
  @@map("freights")
}

model Route {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  companyId String  @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])

  citiesInRoute CityInRoute[]

  @@map("routes")
}

model CityInRoute {
  id String @id @default(uuid())

  routeId String @map("route_id")
  route   Route  @relation(fields: [routeId], references: [id])

  cityId String @map("city_id")
  city   City   @relation(fields: [cityId], references: [id])

  @@map("cities_in_route")
}

model State {
  id      String @id @default(uuid())
  name    String
  acronym String @unique

  areasInState AreaInState[]
  cities       City[]

  @@map("states")
}

model Area {
  id   String @id @default(uuid())
  name String
  code String @unique

  areasInState AreaInState[]
  citiesInArea CityInArea[]

  @@map("areas")
}

model AreaInState {
  id String @id @default(uuid())

  stateId String @map("state_id")
  state   State  @relation(fields: [stateId], references: [id], onDelete: Cascade)

  areaId String @map("area_id")
  area   Area   @relation(fields: [areaId], references: [id], onDelete: Cascade)

  @@map("areas_in_state")
}

model City {
  id   String @id @default(uuid())
  name String

  stateId String @map("state_id")
  state   State  @relation(fields: [stateId], references: [id], onDelete: Cascade)

  citiesInArea  CityInArea[]
  addresses     Address[]
  citiesInRoute CityInRoute[]

  @@unique([stateId, name])
  @@map("cities")
}

model CityInArea {
  id String @id @default(uuid())

  cityId String @map("city_id")
  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)

  areaId String @map("area_id")
  area   Area   @relation(fields: [areaId], references: [id], onDelete: Cascade)

  @@map("cities_in_area")
}

model Address {
  id           String   @id @default(uuid())
  zipCode      String   @map("zip_code")
  street       String
  neighborhood String
  number       Int
  complement   String?
  createdAt    DateTime @default(now()) @map("created_at")

  cityId String @map("city_id")
  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)

  companies Company[]
  drivers   Driver[]

  @@map("addresses")
}

enum Role {
  ADMIN
  MANAGER
  FINANCIAL
  COMERCIAL
  OPERATIONAL
}

enum CompanySize {
  MICRO
  SMALL
  MEDIUM
  BIG
}

enum VehicleCategory {
  UTILITY
  VAN
  LIGHT_TRUCKS
  STRAIGHT_TRUCKS
  TRUCKS
  QUAD_AXLE_TRUCKS
  SEMI_TRAILER
  TANDEM_AXLE_TRUCK
}

enum VehicleBody {
  CLOSED
  OPEN
  SIDER
  REFRIGERATED
  BUCKET
}

enum VehicleType {
  OWN
  OUTSOURCED
  RENTED
}

enum FreightType {
  FRACTIONAL
  DIRECT
  DEDICATED
}

enum FreightModality {
  DAILY
  PERCENTAGE
  PRODUCTIVITY
}

enum AccountTypeOfBankDetails {
  CURRENT_ACCOUNT
  SALARY_ACCOUNT
  SAVINGS_ACCOUNT
}

enum AccountStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum DriverType {
  INTERNAL
  FREELANCER
  AGGREGATE
}
